// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  first_name      String
  last_name       String
  email           String    @unique
  phone_number    String?
  location        String?
  profile_picture String    @default("default.png")
  password_hash   String
  member_since    DateTime  @default(now())
  email_verified  Boolean   @default(false)
  last_login      DateTime?
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  sessions        Session[]
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Destination {
  id             Int    @id @default(autoincrement())
  name           String
  country        String
  description    String
  main_image_url String

  retreats Retreat[]
}

model Retreat {
  id              Int     @id @default(autoincrement())
  destination_id  Int
  name            String
  description     String
  duration_days   Int
  category        String
  price_usd       Decimal @db.Decimal(10, 2)
  cover_image_url String

  images      RetreatImage[] // ‚Üê relation to images
  destination Destination    @relation(fields: [destination_id], references: [id])
}

model RetreatImage {
  id         Int      @id @default(autoincrement())
  image_url  String
  retreat    Retreat  @relation(fields: [retreat_id], references: [id])
  retreat_id Int
  created_at DateTime @default(now())
}
